version: '3.11'

services:
  nginx:
    container_name: nginx
    build: nginx
    volumes:
      - staticfiles:/app/staticfiles
      - ./app/media/:/app/media
    ports:
      - 80:80
      - 443:443
    depends_on:
      - app

  app:
    build:
      context: .
    env_file:
      - .env
    container_name: app
#    command: gunicorn app.megano.wsgi:application --workers 4 --bind=0.0.0.0:8000
    # Собираем статику и запускаем сервер
    command: ["/docker/app.sh"]
    volumes:
      # Именованный том
      - staticfiles:/app/staticfiles
      # Дублируем файлы в контейнер физически, т.к. картинки не копируются командой COPY в Dockerfile
      - ./app/media/:/app/media
    expose:
      - 8000
    ports:
      - 8000:8000
    depends_on:
      - postgres
      - redis
      - celery

  redis:
    image: redis:7
    container_name: redis
    # На случай, если в Docker уже есть запущенные контейнеры с redis на порту 6379
    command: --port 6379
    expose:
      - 6379

  celery:
    # Т.к. Celery это не отдельная технология как PostgresSQL или Redis, а просто пакет, используемый в приложении,
    # то в качестве образа используется та же сборка (Dockerfile), что и при разворачивании контейнера с приложением
    build:
      context: .
    # Файл с переменными окружения для использования в приложении
    env_file:
      - .env
    container_name: celery
    # Команды для запуска Celery в отдельном файле
    # "celery" - передаем аргумент в команду, прописанную в файле celery.sh
    command: ["/docker/celery.sh", "celery"]
    # Зависимость (контейнер с celery запуститься только после запуска контейнера с redis)
    depends_on:
      - redis

  flower:
    # Т.к. flower это не отдельная технология как PostgresSQL или Redis, а просто пакет, используемый в приложении,
    # то в качестве образа используется та же сборка (Dockerfile), что и при разворачивании контейнера с приложением
    build:
      context: .
    # Файл с переменными окружения для использования в приложении
    env_file:
      - .env
    # Название контейнера
    container_name: flower
    # Команды для запуска flower
    # Тот же файл, что и для запуска celery, просто передаем другой аргумент и выполнится другая команда
    # "flower" - передаем аргумент в команду, прописанную в файле celery.sh
    command: ["/docker/celery.sh", "flower"]
    # Зависимость (контейнер с flower запуститься только после запуска контейнера с redis и celery)
    depends_on:
      - redis
      - celery
    # Порты, чтобы можно было руками зайти и просмотреть запущенные воркеры и задачи в фоне
    # порт на ПК: порт в контейнере
    ports:
      - 5555:5555

  postgres:
    image: postgres:15
    container_name: postgres
    command: -p 5432
    expose:
      - 5432
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DB_USER:?err}
      - POSTGRES_PASSWORD=${DB_PASS:?err}
      - POSTGRES_DB=${DB_NAME:?err}
    env_file:
      - .env
    # Именованный том
    volumes:
      - postgres_db:/var/lib/postgresql/data

# Объявляем именованные тома
volumes:
  postgres_db:
  staticfiles: